{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAU5C,MAAM,OAAO,oBACX,SAAQ,SAAS;IAGjB,SAAS;QACP,MAAM,IAAI,CAAC,aAAa,CAAC,gCAAgC,CAAC,CAAC;IAC7D,CAAC;IACD,KAAK,CAAC,qBAAqB;QACzB,MAAM,IAAI,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC;IACtD,CAAC;IACD,KAAK,CAAC,oBAAoB;QACxB,MAAM,IAAI,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC;IACtD,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,QAAwB;QACnC,MAAM,IAAI,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC;IACtD,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,MAAM,IAAI,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC;IACtD,CAAC;IACD,KAAK,CAAC,QAA2B;QAC/B,MAAM,IAAI,CAAC,aAAa,CAAC,gCAAgC,CAAC,CAAC;IAC7D,CAAC;IACD,IAAI;QACF,MAAM,IAAI,CAAC,aAAa,CAAC,gCAAgC,CAAC,CAAC;IAC7D,CAAC;IACD,qBAAqB;QACnB,MAAM,IAAI,CAAC,aAAa,CAAC,gCAAgC,CAAC,CAAC;IAC7D,CAAC;IACD,aAAa;QACX,MAAM,IAAI,CAAC,aAAa,CAAC,gCAAgC,CAAC,CAAC;IAC7D,CAAC;IACD,WAAW;QACT,MAAM,IAAI,CAAC,aAAa,CAAC,gCAAgC,CAAC,CAAC;IAC7D,CAAC;IACD,iBAAiB;QACf,MAAM,IAAI,CAAC,aAAa,CAAC,gCAAgC,CAAC,CAAC;IAC7D,CAAC;IACD,gBAAgB;QACd,MAAM,IAAI,CAAC,aAAa,CAAC,gCAAgC,CAAC,CAAC;IAC7D,CAAC;IACD,kBAAkB;QAChB,MAAM,IAAI,CAAC,aAAa,CAAC,gCAAgC,CAAC,CAAC;IAC7D,CAAC;CACF;AAED,MAAM,iBAAiB,GAAG,IAAI,oBAAoB,EAAE,CAAC;AAErD,OAAO,EAAE,iBAAiB,EAAE,CAAC","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  PermissionStatus,\n  SpeechRecognitionPlugin,\n  UtteranceOptions,\n  RecordingResult,\n  RecordOptions\n} from './definitions';\n\nexport class SpeechRecognitionWeb\n  extends WebPlugin\n  implements SpeechRecognitionPlugin\n{\n  available(): Promise<{ available: boolean }> {\n    throw this.unimplemented('Method not implemented on web.');\n  }\n  async startMicrophoneStream(): Promise<RecordingResult> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async stopMicrophoneStream(): Promise<RecordingResult> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  async record(_options?: RecordOptions): Promise<RecordingResult> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n\n  async stopRecording(): Promise<void> {\n    throw this.unimplemented('Not implemented on web.');\n  }\n  start(_options?: UtteranceOptions): Promise<{ matches?: string[] }> {\n    throw this.unimplemented('Method not implemented on web.');\n  }\n  stop(): Promise<void> {\n    throw this.unimplemented('Method not implemented on web.');\n  }\n  getSupportedLanguages(): Promise<{ languages: any[] }> {\n    throw this.unimplemented('Method not implemented on web.');\n  }\n  hasPermission(): Promise<{ permission: boolean }> {\n    throw this.unimplemented('Method not implemented on web.');\n  }\n  isListening(): Promise<{ listening: boolean }> {\n    throw this.unimplemented('Method not implemented on web.');\n  }\n  requestPermission(): Promise<void> {\n    throw this.unimplemented('Method not implemented on web.');\n  }\n  checkPermissions(): Promise<PermissionStatus> {\n    throw this.unimplemented('Method not implemented on web.');\n  }\n  requestPermissions(): Promise<PermissionStatus> {\n    throw this.unimplemented('Method not implemented on web.');\n  }\n}\n\nconst SpeechRecognition = new SpeechRecognitionWeb();\n\nexport { SpeechRecognition };\n"]}